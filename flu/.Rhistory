for (i in days){
PlotFun(i)
}
par(mfrow=c(5,1))
for (i in days){
PlotFun(i)
}
PlotFun <- function(day){
barplot(as.numeric(ts2[which(ts$day == day),2:5]),
main = day,
names.arg= c("3:30", "4:00", "4:30", "5:00"))
}
par(mfrow=c(5,1))
for (i in days){
PlotFun(i)
}
PlotFun <- function(day){
barplot(as.numeric(ts2[which(ts$day == day),2:5]),
main = day,
names.arg= c("3:30", "4:00", "4:30", "5:00"))
abline(h=0)
}
par(mfrow=c(5,1))
for (i in days){
PlotFun(i)
}
par(mfrow=c(5,1))
par(mar=c(3,2,1,1))
for (i in days){
PlotFun(i)
}
PlotFun <- function(day){
bp <- barplot(as.numeric(ts2[which(ts$day == day),2:5]),
main = day,
names.arg= c("3:30", "4:00", "4:30", "5:00"))
text(bp[,1],
y = 1,
as.numeric(ts2[which(ts$day == day),2:5]))
abline(h=0)
}
par(mfrow=c(5,1))
par(mar=c(3,2,1,1))
for (i in days){
PlotFun(i)
}
PlotFun <- function(day){
bp <- barplot(as.numeric(ts2[which(ts$day == day),2:5]),
main = day,
names.arg= c("3:30", "4:00", "4:30", "5:00"))
text(bp[,1],
y = as.numeric(ts2[which(ts$day == day),2:5]),
pos = 3,
as.numeric(ts2[which(ts$day == day),2:5]))
abline(h=0)
}
par(mfrow=c(5,1))
par(mar=c(3,2,1,1))
for (i in days){
PlotFun(i)
}
####
PlotFun <- function(day){
bp <- barplot(as.numeric(ts2[which(ts$day == day),2:5]),
main = day,
names.arg= c("3:30", "4:00", "4:30", "5:00"))
text(bp[,1],
y = as.numeric(ts2[which(ts$day == day),2:5]),
pos = 1,
as.numeric(ts2[which(ts$day == day),2:5]))
abline(h=0)
}
par(mfrow=c(5,1))
par(mar=c(3,2,1,1))
for (i in days){
PlotFun(i)
}
PlotFun <- function(day){
num <- as.numeric(ts2[which(ts$day == day),2:5])
bp <- barplot(num,
main = day,
names.arg= c("3:30", "4:00", "4:30", "5:00"))
text(bp[,1],
y = num,
pos = 1,
labels= num)
abline(h=0)
}
par(mfrow=c(5,1))
par(mar=c(3,2,1,1))
for (i in days){
PlotFun(i)
}
teacherPay <- 12
studentCost <- 7
for (i in ts$day){
for (j in c(30,60,90,120)){
income <- Hourfy(ts[which(ts$day == i),paste0("x", j)])*studentCost
expense <- Hourfy(j)*teacherPay
roi <- income - expense
ts[which(ts$day == i), paste0("roi", j)] <- roi
}
}
ts2 <- ts[, grepl("roi|day", colnames(ts))]
colnames(ts2) <- c("day", "3:30", "4:00", "4:30", "5:00")
ts2
PlotFun <- function(day){
num <- as.numeric(ts2[which(ts$day == day),2:5])
bp <- barplot(num,
main = day,
names.arg= c("3:30", "4:00", "4:30", "5:00"))
text(bp[,1],
y = num,
pos = 1,
labels= num)
abline(h=0)
}
par(mfrow=c(5,1))
par(mar=c(3,2,1,1))
for (i in days){
PlotFun(i)
}
teacherPay <- 12
studentCost <- 7
for (i in ts$day){
for (j in c(30,60,90,120)){
income <- Hourfy(ts[which(ts$day == i),paste0("x", j)])*studentCost
expense <- Hourfy(j)*teacherPay
roi <- income - expense
ts[which(ts$day == i), paste0("roi", j)] <- roi
}
}
ts2 <- ts[, grepl("roi|day", colnames(ts))]
colnames(ts2) <- c("day", "3:30", "4:00", "4:30", "5:00")
ts2
PlotFun <- function(day){
num <- as.numeric(ts2[which(ts$day == day),2:5])
bp <- barplot(num,
names.arg= c("3:30", "4:00", "4:30", "5:00"),
xlab = day)
text(bp[,1],
y = num,
pos = ifelse(num > 0,1,3),
labels= num)
abline(h=0)
}
par(mfrow=c(5,1))
par(mar=c(3,2,1,1))
for (i in days){
PlotFun(i)
}
########
teacherPay <- 12
studentCost <- 7
for (i in ts$day){
for (j in c(30,60,90,120)){
income <- Hourfy(ts[which(ts$day == i),paste0("x", j)])*studentCost
expense <- Hourfy(j)*teacherPay
roi <- income - expense
ts[which(ts$day == i), paste0("roi", j)] <- roi
}
}
ts2 <- ts[, grepl("roi|day", colnames(ts))]
colnames(ts2) <- c("day", "3:30", "4:00", "4:30", "5:00")
ts2
PlotFun <- function(day){
num <- as.numeric(ts2[which(ts$day == day),2:5])
bp <- barplot(num,
names.arg= c("3:30", "4:00", "4:30", "5:00"),
xlab = day)
text(bp[,1],
y = num,
pos = ifelse(num > 0,1,3),
labels= num)
abline(h=0)
}
par(mfrow=c(5,1))
par(mar=c(4,2,1,1))
for (i in days){
PlotFun(i)
}
########
#
teacherPay <- 12
studentCost <- 7
for (i in ts$day){
for (j in c(30,60,90,120)){
income <- Hourfy(ts[which(ts$day == i),paste0("x", j)])*studentCost
expense <- Hourfy(j)*teacherPay
roi <- income - expense
ts[which(ts$day == i), paste0("roi", j)] <- roi
}
}
ts2 <- ts[, grepl("roi|day", colnames(ts))]
colnames(ts2) <- c("day", "3:30", "4:00", "4:30", "5:00")
ts2
PlotFun <- function(day){
num <- as.numeric(ts2[which(ts$day == day),2:5])
bp <- barplot(num,
names.arg= c("3:30", "4:00", "4:30", "5:00"),
ylab = day)
text(bp[,1],
y = num,
pos = ifelse(num > 0,1,3),
labels= num)
abline(h=0)
}
par(mfrow=c(5,1))
par(mar=c(4,4,1,1))
for (i in days){
PlotFun(i)
}
########
conception <- as.Date("2014-08-14", format = "%Y-%m-%d")
regla <- as.Date("2014-08-14", format = "%Y-%m-%d")
due <- as.Date("2015-05-21", format = "%Y-%m-%d")
conception <- as.Date("2014-08-28", format = "%Y-%m-%d")
due - regla
due - regla / 7
as.numeric(due - regla) / 7
as.numeric(due - conception) / 7
p <- read.csv("C:/Users/BrewJR/Desktop/pregnancy_calendar.csv")
head(p)
p$date <- as.Date(p$Start.Date, format = "%m/%d/%Y")
head(p)
10/7
10 %/% 7
13 %/% 7
14 %/% 7
p$days <-
as.numeric(p$date - p$date[1])
head(p)
p$weeks <-
7 %/% p$days
head(p)
p$weeks <-
p$days %/% 7
head(p)
20 %% 7
p$edays <-
p$days %% 7
head(p)
head(p, nrows=20)
head(p, nrow=20)
head(p, rows=20)
View(p)
p$Subject <- paste0(
p$weeks,
" weeks and ",
p$edays,
" days"
)
head(p)
p$Subject
as.data.frame(p$Subject)
View(p)
280/3
write.csv(p, "C:/Users/BrewJR/Desktop/pCal.csv")
2+2
plot(1:10, (1:10^2))
plot(1:10, (1:10)^2)
plot(1:10, (1:10)^2, type = "l")
plot(sqrt(1:100), 200:299, pch=16, col = adjustcolor("darkgreen", alpha.f=0.6))
plot(sqrt(1:100), 200:299, pch=16, col = adjustcolor("darkgreen", alpha.f=0.6), cex = seq(0,3, length = 100))
plot(sqrt(1:100), 200:299, pch=16, col = adjustcolor("darkgreen", alpha.f=0.6), cex = seq(0,5, length = 100))
barplot(1:10)
barplot(1:10, main = "yo")
barplot(1:10, main = "yo", col = "red")
barplot(1:10, main = "yo", col = "red", border = "green")
barplot(1:10, main = "yo", col = "red", border = FALSE)
barplot(1:10, main = "yo", col = "red", border = FALSE, xlab = "These are bars")
barplot(1:10, main = "yo", col = "red", border = FALSE, xlab = "These are bars", ylab = "These are numbers")
barplot(1:10, main = "yo", col = c("red", "blue"), border = FALSE, xlab = "These are bars", ylab = "These are numbers")
barplot(1:10, main = "yo", col = c("red", "blue", "green"), border = FALSE, xlab = "These are bars", ylab = "These are numbers")
mycolors <- "red"
barplot(1:5, col = mycolors)
mycolors <- c("red", "red", "red", "green", "red")
barplot(1:5, col = mycolors)
mycolors <- c("red", "blue")
barplot(1:5, col = mycolors)
plot(1:10, 1:10, pch=15)
people <- c("joe", "jon", "frank", "leslie", "pat", "cat", "dan", "sue", "juan")
age <- c(30, 20, 15, 100, 87, 93, 41, 19 26)
age <- c(30, 20, 15, 100, 87, 93, 41, 19 26)
age <- c(30, 20, 15, 100, 87, 93, 41, 19, 26)
money <- c(60, 40, 20 ,81, 72, 135, 50, 35, 6)
data.frame(people, age, money)
remove.packages("dplyr")
install.packages("dplyr")
#####
#  WRITE A FUNCTION TO ENCAPTURE DENVER COSTS
#####
denver <- function (admin= 24.69,
laiv_vax = 17.50,
tiv_vax = 11.17,
vfc_vax = 0,
priv_reim_vax = 20,
priv_reim_admin = 12,
vfc_reim_admin = 6.50,
vrc_reim_vax = 0,
vfc = 4827,
private = 1023,
priv_percent_laiv = 92.86694,
vfc_percent_laiv = 92.86694){
# how much does medicaid cost
medicaid_cost <- vfc * (vfc_vax + admin)
# how much does private cost
private_laiv_cost <- (laiv_vax + admin) *(priv_percent_laiv*.01) * private
private_tiv_cost <- (tiv_vax + admin) * (1- (priv_percent_laiv *.01)) *private
private_cost <- private_laiv_cost + private_tiv_cost
#how much does medicaid make
medicaid_rev <- (vfc_reim_admin + vfc_vax) * vfc
#how much does private make
private_rev <- ( priv_reim_admin + priv_reim_vax ) * private
# What's the total revenue / loss
total <- medicaid_rev + private_rev - medicaid_cost - private_cost
# return
total
}
denver()
denver(private = 50, vfc = 50)
denver(private = 25, vfc = 75)
denver(private = 75, vfc = 25)
denver(private = 100, vfc = 0)
denver <- function (admin= 24.69,
laiv_vax = 17.50,
tiv_vax = 11.17,
vfc_vax = 0,
priv_reim_vax = 20,
priv_reim_admin = 12,
vfc_reim_admin = 6.50,
vrc_reim_vax = 0,
vfc = 4827,
private = 1023,
priv_percent_laiv = 92.86694,
vfc_percent_laiv = 92.86694,
vfc_suc = 82,
priv_suc = 50){
# how much does medicaid cost
medicaid_cost <- vfc * (vfc_vax + admin)
# how much does private cost
private_laiv_cost <- (laiv_vax + admin) *(priv_percent_laiv*.01) * private
private_tiv_cost <- (tiv_vax + admin) * (1- (priv_percent_laiv *.01)) *private
private_cost <- private_laiv_cost + private_tiv_cost
#how much does medicaid make
medicaid_rev <- (vfc_reim_admin + vfc_vax) * vfc * (0.01* vfc_suc)
#how much does private make
private_rev <- ( priv_reim_admin + priv_reim_vax ) * private * (0.01 * priv_suc)
# What's the total revenue / loss
total <- medicaid_rev + private_rev - medicaid_cost - private_cost
# return
total
}
# Now make some calculation
denver()
denver(vfc_suc = 90,
priv_suc = 80)
#####
denver()
denver(private = 25, vfc = 75)
x <- vector(length = 100, mode = "numeric")
for (i in 1:100){
x[i] <- denver(vfc_suc = i,
priv_suc = i)
}
barplot(x, names.arg = 1:100,
xlab = "Percent reimbursement",
ylab = "Revenue /loss")
plot(1:100, x)
plot(1:100, x,
ylim = c(-160000, 160000))
abline(h = 0, col = "red")
for (i in 1:100){
x[i] <- denver(admin = i)
}
barplot(x)
barplot(x, names.arg = x)
barplot(x, names.arg = 1:100)
denver(admin = 8, vfc_suc = 90, priv_suc = 87)
denver(admin = 8, vfc_suc = 90, priv_suc = 95)
denver(admin = 8, vfc_suc = 95, priv_suc = 95)
denver(admin = 6.50, vfc_suc = 95, priv_suc = 95)
denver(admin = 7, vfc_suc = 95, priv_suc = 95)
denver(admin = 7, vfc_suc = 93, priv_suc = 95)
denver(admin = 7, vfc_suc = 90, priv_suc = 90)
denver(admin = 6, vfc_suc = 90, priv_suc = 90)
denver(admin = 6.8, vfc_suc = 90, priv_suc = 90)
denver(admin = 6.78, vfc_suc = 90, priv_suc = 90)
denver(admin = 6.90, vfc_suc = 90, priv_suc = 90)
<html>
<head>
library(leaflet)
library(RColorBrewer)
library(maps)
library(ggplot2)
library(rgdal)
library(leafletR)
library(rgeos) #for simplification
library(sp)
library(ggmap)
require(shiny)
require(rCharts)
#####
# READ IN GEOCODED SCHOOL DATA
#####
schools <- read.csv("schools.csv")
pedLevels <- c(5,20,40,60,80)
directCosts <- c(203,111,49,28,21)
medicaidDirectCosts <- directCosts*.16
nonMedicaidDirectCosts <- directCosts - medicaidDirectCosts
medicaidDirectCostsFed <- medicaidDirectCosts*.5
medicaidDirectCostsFl <- medicaidDirectCosts*.5
plot(pedLevels, medicaidDirectCosts,
xlim=c(0,80), xlab="Pediatric immunization rate", ylab="Dollars (in millions)")
my4cols <- adjustcolor(c("darkred", "darkblue", "darkgreen"), alpha.f=0.5)
my4labels <- c("Direct Medicaid costs (paid by Florida)",
"Direct Medicaid costs (paid by federal government)",
"Direct non-Medicaid costs")
polygonFun <- function(time, poly1, poly2, poly3){
mm <- c(time, rev(time))
poly1a <- c(rep(0, length(time)), rev(poly1))
poly2a <- c(rep(0, length(time)), rev(poly2))
poly3a <- c(rep(0, length(time)), rev(poly3))
aa <- c(poly1, rev(poly1))
bb <- c(poly2+poly1, rev(poly1))
cc <- c(poly3+poly2+poly1, rev(poly2+poly1))
plot(time, poly1, xaxt="n", type="n", ylim=c(0,max(cc, na.rm=TRUE)),
xlab=("Pediatric immunization rate (%)"), ylab="Dollars (in millions)",
main="Reduction in annual direct costs (by pay source)")
axis(side=1, at=time, labels=time,
tick=FALSE, line=0, cex=0.6)
polygon(mm, poly1a, col=my4cols[1], border=NA)
polygon(mm, bb, col=my4cols[2], border=NA)
polygon(mm, cc, col=my4cols[3], border=NA)
legend(x="topright", fill=rev(my4cols),
legend=rev(my4labels),
border=FALSE, bty="n", cex=0.85)
abline(h=seq(0,200,25), col=adjustcolor("black", alpha.f=0.2))
abline(v=c(5,20,40,60,80), col=adjustcolor("black", alpha.f=0.2))
}
polygonFun(time= pedLevels,
poly1= medicaidDirectCostsFl,
poly2= medicaidDirectCostsFed,
poly3= nonMedicaidDirectCosts)
par(mar=c(4,5,2,1))
############### EXCLUDING PRIVATE
my4cols <- adjustcolor(c("darkred", "darkblue"), alpha.f=0.5)
my4labels <- c("Medicaid costs paid by Florida",
"Total Medicaid costs for Florida")
polygonFun <- function(time, poly1, poly2){
mm <- c(time, rev(time))
poly1a <- c(rep(0, length(time)), rev(poly1))
poly2a <- c(rep(0, length(time)), rev(poly2))
aa <- c(poly1, rev(poly1))
bb <- c(poly2+poly1, rev(poly1))
plot(time, poly1, xaxt="n", type="n", ylim=c(0,max(bb, na.rm=TRUE)),
xlab=("Pediatric immunization rate (%)"), ylab="Dollars (in millions)",
main="Reduction in annual Medicaid costs", cex.axis=1.6,
cex.lab=1.4)
axis(side=1, at=time, labels=time,
tick=FALSE, line=0, cex.axis=1.5)
polygon(mm, poly1a, col=my4cols[1], border=NA)
polygon(mm, bb, col=my4cols[2], border=NA)
legend(x="topright", fill=rev(my4cols),
legend=rev(my4labels),
border=FALSE, bty="n", cex=1.4)
abline(h=seq(0,200,5), col=adjustcolor("black", alpha.f=0.2))
abline(v=c(5,20,40,60,80), col=adjustcolor("black", alpha.f=0.2))
}
polygonFun(time= pedLevels,
poly1= medicaidDirectCostsFl,
poly2= medicaidDirectCostsFed)
###
# set working directory (this is a conditional depending on whose computer is being used)
###
if ( Sys.info()["sysname"] == "Linux" ){
public <- "/home/joebrew/Documents/benbrew/flu"
private <- "/media/joebrew/JB/fdoh/private/ben"
} else if(Sys.info()["user"] == "BrewJR" ){
public <- "C:/Users/BrewJR/Documents/benbrew/flu"
private <- "E:/fdoh/private/ben"
} else {
public <- "C:/Users/Ben/Documents/benbrew/flu"
private <- "C:/Users/Ben/Documents/private/"
}
setwd(public)
setwd(private)
dat <- read.csv("obesity_flu_absences_merged.csv")
###
# read in nurse data (stored in the public directory)
###
setwd(public)
nurses <- read.csv("nurses.csv")
# the following will group nurses by each nurse and
# get the number of schools each has worked out
library(dplyr)
nurses %>%
group_by(nurse) %>%
summarise(x = length(unique(school))) %>%
arrange(desc(x))
head(dat)
table(is.na(dat$cat))
table(is.na(dat$cat_bi))
dat$cat_bi[1:100]
dat$cat[1:100]
table(dat$cat)
table(dat$cat_bi)
head(dat)
dat[which(dat$id == 7),]
dat[which(dat$id == 58),]
dat12 <- dat[which(dat$year == 2012),]
5471*180
table(dat12$imm)
